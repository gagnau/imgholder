(function(){function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s}return e})()({1:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var SVGGenerator = function () {
    function SVGGenerator(imageContainer) {
        _classCallCheck(this, SVGGenerator);

        this.imageContainer = imageContainer;
        this.svgElement = document.createElementNS('http://www.w3.org/2000/svg', 'svg');
        var dimensions = imageContainer.dataset.placeholder.split('/');
        this.width = parseInt(dimensions[0]);
        this.height = parseInt(dimensions[1]);
        this.svgElement.setAttributeNS(null, 'width', this.width);
        this.svgElement.setAttributeNS(null, 'height', this.height);
        this._setColors();
    }

    _createClass(SVGGenerator, [{
        key: 'createBackground',
        value: function createBackground(color) {
            var rectElement = document.createElementNS('http://www.w3.org/2000/svg', 'rect');
            rectElement.setAttributeNS(null, 'fill', color);
            rectElement.setAttributeNS(null, 'stroke', 'none');
            rectElement.setAttributeNS(null, 'x', 0);
            rectElement.setAttributeNS(null, 'y', 0);
            rectElement.setAttributeNS(null, 'width', this.width);
            rectElement.setAttributeNS(null, 'height', this.height);

            this.svgElement.append(rectElement);
        }
    }, {
        key: 'createCircle',
        value: function createCircle(radius) {
            var borderColor = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'black';
            var fillColor = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'black';

            var circle = document.createElementNS('http://www.w3.org/2000/svg', 'circle');
            circle.setAttributeNS(null, 'cx', this.width / 2);
            circle.setAttributeNS(null, 'cy', this.height / 2);
            circle.setAttributeNS(null, 'r', radius);
            borderColor && circle.setAttributeNS(null, 'stroke', borderColor);
            fillColor && circle.setAttributeNS(null, 'fill', fillColor);
            this.svgElement.append(circle);
        }
    }, {
        key: 'createHorizontalLine',
        value: function createHorizontalLine(x, y, length, color) {
            var line = document.createElementNS('http://www.w3.org/2000/svg', 'line');
            line.setAttribute('x1', x);
            line.setAttribute('y1', y);
            line.setAttribute('x2', x + length);
            line.setAttribute('y2', y);
            line.setAttribute("stroke", color);
            this.svgElement.append(line);
        }
    }, {
        key: 'createVerticalLine',
        value: function createVerticalLine(x, y, length, color) {
            var line = document.createElementNS('http://www.w3.org/2000/svg', 'line');
            line.setAttribute('x1', x);
            line.setAttribute('y1', y);
            line.setAttribute('x2', x);
            line.setAttribute('y2', y + length);
            line.setAttribute("stroke", color);
            this.svgElement.append(line);
        }
    }, {
        key: '_setColors',
        value: function _setColors() {
            var containerWidth = Math.round(this.imageContainer.getBoundingClientRect().width);
            var containerHeight = Math.round(this.imageContainer.getBoundingClientRect().height);

            this.backgroundColor = 'lightgray';
            if (containerWidth && containerHeight) {
                var boundsScale = containerWidth / containerHeight;
                var svgScale = this.width / this.height;
                if (boundsScale != svgScale) {
                    this.backgroundColor = 'tomato';
                }
            }
            this.createBackground(this.backgroundColor);
        }
    }, {
        key: '_createDefaultSVGImage',
        value: function _createDefaultSVGImage() {
            var max = this.width > this.height ? this.width : this.height;
            var maxRadius = max / 2;
            var scaleFactor = maxRadius / 5;

            var horizontalScaling = this.height / 4;
            var verticalScaling = this.width / 4;

            var maxElements = 5;
            var currentElement = 0;

            do {
                this.createCircle(maxRadius - scaleFactor * currentElement, 'black', this.backgroundColor);
                currentElement++;
            } while (currentElement < maxElements);

            currentElement = 0;
            do {
                this.createHorizontalLine(0, horizontalScaling * currentElement, this.width, 'black');
                this.createVerticalLine(verticalScaling * currentElement, 0, this.height, 'black');
                currentElement++;
            } while (currentElement < maxElements);

            return this.svgElement;
        }
    }, {
        key: '_appendText',
        value: function _appendText() {
            var textElement = document.createElementNS('http://www.w3.org/2000/svg', 'text');
            var content = this.svgElement.ownerDocument.createTextNode(this.width + ' x ' + this.height);

            textElement.setAttributeNS(null, 'x', this.width / 2);
            textElement.setAttributeNS(null, 'y', this.height / 2 + 25);
            textElement.setAttributeNS(null, 'fill', 'black');
            textElement.setAttributeNS(null, 'text-anchor', 'middle');
            textElement.setAttributeNS(null, 'font-size', '100');
            textElement.setAttributeNS(null, 'font-family', 'Helvetica');

            textElement.appendChild(content);
            this.svgElement.append(textElement);
        }
    }, {
        key: 'getDefaultXMLImage',
        value: function getDefaultXMLImage() {
            this._createDefaultSVGImage();
            this._appendText();
            return new XMLSerializer().serializeToString(this.svgElement);
        }
    }]);

    return SVGGenerator;
}();

exports.default = SVGGenerator;

},{}],2:[function(require,module,exports){
'use strict';

var _SVGGenerator = require('./SVGGenerator');

var _SVGGenerator2 = _interopRequireDefault(_SVGGenerator);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

document.querySelectorAll('[data-placeholder]').forEach(function (imageContainer) {
    var svgGen = new _SVGGenerator2.default(imageContainer);
    var xml = svgGen.getDefaultXMLImage();
    imageContainer.src = 'data:image/svg+xml;charset=utf-8,' + xml;
});

var rtime = void 0;
var timeout = false;
var delta = 200;
window.addEventListener("resize", function () {
    rtime = new Date();
    if (timeout === false) {
        timeout = true;
        setTimeout(resizeend, delta);
    }
});

var resizeend = function resizeend() {
    if (new Date() - rtime < delta) {
        setTimeout(resizeend, delta);
    } else {
        timeout = false;
        document.querySelectorAll('[data-placeholder]').forEach(function (imageContainer) {
            var svgGen = new _SVGGenerator2.default(imageContainer);
            var xml = svgGen.getDefaultXMLImage();
            imageContainer.src = 'data:image/svg+xml;charset=utf-8,' + xml;
        });
    }
};

},{"./SVGGenerator":1}]},{},[2]);
